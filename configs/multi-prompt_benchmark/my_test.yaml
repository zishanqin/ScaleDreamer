name: "my_test"
tag: "${rmspace:${system.prompt_processor.prompt_library},_}"
exp_root_dir: "test_outputs"
seed: 0

data_type: "multiprompt-camera-datamodule"
data:
  batch_size: 1
  width: 64
  height: 64
  camera_distance_range: [1.5, 2.0] #[1.0, 1.5]
  fovy_range: [40, 70]
  elevation_range: [-10, 45]
  camera_perturb: 0.
  center_perturb: 0.
  up_perturb: 0.
  eval_camera_distance: 2.0 #1.5
  eval_fovy_deg: 70.
  n_val_views: 30
  # generation related
  prompt_library: ${system.prompt_processor.prompt_library}
  dim_gaussian: 0 # not used for Hyper-iNGP

  # missing in this file
  # light_sample strategy: "dreamfusion" -- TODO: manually add


system_type: "dreamfusion-system"
system:
  stage: "coarse"
  initialize_shape: false # #true #
  visualize_samples: false 
  validation_via_video: true

  geometry_type: "Hyper-iNGP"
  geometry:
    radius: 2.0 # nan for 1.0
    normal_type: "analytic" # "finite_difference"
    finite_difference_normal_eps: 0.01

    sdf_bias: sphere
    sdf_bias_params: 0.5
    shape_init: sphere
    shape_init_params: 0.5

    # # missing
    # # use Magic3D density initialization instead
    # density_bias: "blob_magic3d"
    # density_activation: softplus
    # density_blob_scale: 10.
    # density_blob_std: 0.5

    # # coarse to fine hash grid encoding
    # # to ensure smooth analytic normals
    # pos_encoding_config:
    #   otype: ProgressiveBandHashGrid
    #   n_levels: 16
    #   n_features_per_level: 2
    #   log2_hashmap_size: 19
    #   base_resolution: 16
    #   per_level_scale: 1.447269237440378 # max resolution 4096
    #   start_level: 8 # resolution ~200
    #   start_step: 2000
    #   update_steps: 500

    hypernet_config: 
      c_dim: 1024
      out_dims: {
          "sdf_weights": [64, 1],
          "feature_weights": [64, 3],
      }
      spectral_norm: False
      n_neurons: 64
      n_hidden_layers: 1
  
  material_type: no-material # TODO: check later; make it as no material for now as we want to focus on the geometry atm
  material:
    n_output_dims: 3
    color_activation: sigmoid
    requires_normal: true

  background_type: "multiprompt-neural-hashgrid-environment-map-background" # different from threestudio
  background:
    color_activation: sigmoid
    random_aug: true
    random_aug_prob: 0.2
    pos_encoding_config:
      otype: HashGrid
      n_levels: 16
      n_features_per_level: 2
      log2_hashmap_size: 19
      base_resolution: 16
      per_level_scale: 1.


  renderer_type: "generative-space-volsdf-volume-renderer"
  renderer:
    radius: ${system.geometry.radius}
    use_volsdf: true
    trainable_variance: false # important!
    learned_variance_init: 0.340119 # 0.340119 = log(30) / 10, 30 is the most common variance across the prompts

    estimator: importance
    num_samples_per_ray: 64
    num_samples_per_ray_importance: 128
    near_plane: 0.1
    far_plane: 4.0
    train_chunk_size: 0 #100000

  # original render but unsuitable for multi-prompt setting
  # renderer_type: "nerf-volume-renderer"
  # renderer:
  #   radius: ${system.geometry.radius}
  #   num_samples_per_ray: 512

  prompt_processor_type: "stable-diffusion-multi-prompt-processor"
  prompt_processor:
    pretrained_model_name_or_path: "pretrained/stable-diffusion-2-1-base"
    prompt_library: ???
    use_perp_neg: true
    front_threshold: 30. # same as vsd
    back_threshold: 30.

  guidance_type: "stable-diffusion-guidance"
  guidance:
    pretrained_model_name_or_path: "stabilityai/stable-diffusion-2-1-base"
    guidance_scale: 100.
    weighting_strategy: sds
    min_step_percent: 0.02
    max_step_percent: 0.98
    # # taking from asd -- TODO: check each below
    # plus_ratio: 0.1
    # plus_random: true
    # guidance_perp_neg: -0.5

  loggers:
    wandb:
      enable: false
      project: "threestudio"
      name: None

  loss:
    lambda_sds: 1.
    lambda_orient: [0, 10., 1000., 5000]
    lambda_sparsity: 1.
    lambda_opaque: 0.
    # # missing
    # lambda_z_variance: 0.
    # lambda_eikonal: [1, 100., 1., 5000] # first 1/10 iterations

  optimizer:
    name: Adam
    args:
      lr: 0.01
      betas: [0.9, 0.99]
      eps: 1.e-15
    params:
      geometry:
        lr: 0.01
      background:
        lr: 0.001

  
  # guidance_type: "stable-diffusion-asynchronous-score-distillation-guidance"
  # guidance:
  #   pretrained_model_name_or_path: "pretrained/stable-diffusion-2-1-base"
  #   guidance_scale: 7.5
  #   plus_ratio: 0.1
  #   plus_random: true
  #   min_step_percent: [0, 0.5, 0.02, 50000] # follow MVDream
  #   max_step_percent: [0, 0.98, 0.5, 50000] # same as vsd
  #   guidance_perp_neg: -0.5
  # loggers:
  #   wandb:
  #     enable: false
  #     project: "threestudio"
  #     name: None

  # loss:
  #   lambda_asd: 1.
  #   lambda_orient: 0.
  #   lambda_sparsity: 20
  #   lambda_opaque: [40000, 0, 10., 50000] # final 1/5 iterations
  #   lambda_z_variance: 0.
  #   lambda_eikonal: [1, 100., 1., 5000] # first 1/10 iterations

  # optimizer:
  #   name: Adam
  #   args:
  #     betas: [0., 0.99]
  #     eps: 1.e-8
  #   params:
  #     geometry:
  #       lr: 0.004
  #     background:
  #       lr: 0.001

trainer:
  max_steps: 10000 # 50000
  log_every_n_steps: 1
  num_sanity_val_steps: 0
  val_check_interval: 200 # 5000
  enable_progress_bar: true
  precision: 16-mixed # 32

checkpoint:
  save_last: true
  save_top_k: -1
  every_n_train_steps: ${trainer.val_check_interval}